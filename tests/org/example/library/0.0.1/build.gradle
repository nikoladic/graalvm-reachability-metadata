plugins {
    id 'java-library'
    id 'org.graalvm.buildtools.native'
}

repositories {
    mavenCentral()
}

def junitVersion = providers.gradleProperty('junit.jupiter.version')
    .forUseAtConfigurationTime()
    .get()

def libraryVersion = providers.gradleProperty('library.version')
    .forUseAtConfigurationTime()
    .get() // This value can be used to request specific library version to test with.

def configPath = providers.gradleProperty('config.dir')
    .forUseAtConfigurationTime()
    .get()

File configFile;
if (!configPath.startsWith("/")) {
    configFile = file("${project.rootDir}/../../../../config/${configPath}")
} else {
    configFile = file(configPath)
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}


test {
    useJUnitPlatform()
}

graalvmNative {
    binaries {
        test {
            configurationFileDirectories.from(configFile)
            buildArgs.add('-H:+StrictConfiguration') // Necessary in order to test configuration properly
            agent {
                enabled = false
                options.add("experimental-conditional-configuration-for-packages=org.example.library")
                options.add("conditional-configuration-class-name-exclude-patterns=Test")
            }
            verbose = true
        }
    }
}
