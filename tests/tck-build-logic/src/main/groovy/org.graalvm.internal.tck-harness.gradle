import org.graalvm.internal.tck.TestUtils
import org.graalvm.internal.tck.harness.TestInvocationLogic
import org.graalvm.internal.tck.harness.TestInvocationTask

TestUtils.locateRepoDirs(project) // Find relevant directories for the test harness.

logger.lifecycle("GraalVM Reachability Metadata TCK")
logger.lifecycle("---------------------------------")

String coordinates = Objects.requireNonNullElse(project.findProperty("coordinates"), "")
def (String groupId, String artifactId, String version) = TestInvocationLogic.splitCoordinates(coordinates)

// gradle test -Pcoordinates=<maven-coordinates>
Provider<Task> test = tasks.register("test", DefaultTask) { task ->
    task.setDescription("Tests JVM Reflection Metadata that matches given coordinates")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

for (Map<String, ?> inv in TestInvocationLogic.generateTestInvocations(groupId, artifactId, version)) {
    String taskName = "test-" + inv["coordinates"].replace(":", "-")
    if ((!tasks.getNames().contains(taskName))) {
        tasks.register(taskName, TestInvocationTask, inv)
    }
    test.configure {
        dependsOn(taskName)
    }
}

// gradle diff -PbaseCommit=<base-commit> -PnewCommit=<new-commit>
Provider<Task> diff = tasks.register("diff", DefaultTask) { task ->
    task.setDescription("Tests JVM Reflection Metadata that was changed between 'baseCommit' and 'newCommit'")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)

    if (!project.hasProperty("baseCommit")) {
        task.doFirst {
            throw new GradleException("Missing 'baseCommit' property! Rerun Gradle with '-PbaseCommit=<commit-hash>'")
        }
    }
}

if (project.hasProperty("baseCommit")) {
    String baseCommit = project.findProperty("baseCommit")
    String newCommit = Objects.requireNonNullElse(project.findProperty("newCommit"), "HEAD")
    for (def inv in TestInvocationLogic.diffTestInvocations(baseCommit, newCommit)) {
        String taskName = "test-" + inv["coordinates"].replace(":", "-")
        if ((!tasks.getNames().contains(taskName))) {
            tasks.register(taskName, TestInvocationTask, inv)
        }
        diff.configure {
            dependsOn(taskName)
        }
    }
}
