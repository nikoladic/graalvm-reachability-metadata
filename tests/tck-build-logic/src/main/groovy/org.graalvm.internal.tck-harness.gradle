/*
 * Licensed under Public Domain (CC0)
 *
 * To the extent possible under law, the person who associated CC0 with
 * this code has waived all copyright and related or neighboring
 * rights to this code.
 *
 * You should have received a copy of the CC0 legalcode along with this
 * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

import org.graalvm.internal.tck.TestUtils
import org.graalvm.internal.tck.harness.MetadataLookupLogic
import org.graalvm.internal.tck.harness.TestLookupLogic
import org.graalvm.internal.tck.harness.tasks.TestInvocationTask
import org.graalvm.internal.tck.harness.tasks.CheckstyleInvocationTask

import static org.graalvm.internal.tck.Utils.generateTaskName

TestUtils.locateRepoDirs(project) // Find relevant directories for the test harness.

logger.lifecycle("GraalVM Reachability Metadata TCK")
logger.lifecycle("---------------------------------")

String coordinateFilter = Objects.requireNonNullElse(project.findProperty("coordinates"), "")
List<String> matchingCoordinates = MetadataLookupLogic.getMatchingCoordinates(coordinateFilter)

// gradle test -Pcoordinates=<maven-coordinates>
Provider<Task> test = tasks.register("test", DefaultTask) { task ->
    task.setDescription("Tests JVM Reflection Metadata that matches given coordinates")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

// gradle checkstyle -Pcoordinates=<maven-coordinates>
Provider<Task> checkstyle = tasks.register("checkstyle") { task ->
    task.setDescription("Runs checkstyle on all subprojects")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

tasks.named("check").configure {
    dependsOn(checkstyle)
}

// Here we want to configure all test and checkstyle tasks for all filtered subprojects
for (String coordinates in matchingCoordinates) {
    String testTaskName = generateTaskName("test", coordinates)
    if ((!tasks.getNames().contains(testTaskName))) {
        tasks.register(testTaskName, TestInvocationTask, coordinates)
    }
    test.configure {
        dependsOn(testTaskName)
    }

    String checkstyleTaskName = generateTaskName("checkstyle", coordinates)
    if ((!tasks.getNames().contains(checkstyleTaskName))) {
        tasks.register(checkstyleTaskName, CheckstyleInvocationTask, coordinates)
    }
    checkstyle.configure {
        dependsOn(checkstyleTaskName)
    }
}

// gradle diff -PbaseCommit=<base-commit> -PnewCommit=<new-commit>
Provider<Task> diff = tasks.register("diff", DefaultTask) { task ->
    task.setDescription("Tests JVM Reflection Metadata that was changed between 'baseCommit' and 'newCommit'")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)

    if (!project.hasProperty("baseCommit")) {
        task.doFirst {
            throw new GradleException("Missing 'baseCommit' property! Rerun Gradle with '-PbaseCommit=<commit-hash>'")
        }
    }
}

if (project.hasProperty("baseCommit")) {
    String baseCommit = project.findProperty("baseCommit")
    String newCommit = Objects.requireNonNullElse(project.findProperty("newCommit"), "HEAD")
    for (def coordinates in TestLookupLogic.diffCoordinates(baseCommit, newCommit)) {
        String taskTaskName = generateTaskName("test", coordinates)
        if ((!tasks.getNames().contains(taskTaskName))) {
            tasks.register(taskTaskName, TestInvocationTask, coordinates)
        }
        diff.configure {
            dependsOn(taskTaskName)
        }
    }
}
