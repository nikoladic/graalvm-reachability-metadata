/*
 * Licensed under Public Domain (CC0)
 *
 * To the extent possible under law, the person who associated CC0 with
 * this code has waived all copyright and related or neighboring
 * rights to this code.
 *
 * You should have received a copy of the CC0 legalcode along with this
 * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

import org.graalvm.internal.tck.TestUtils
import org.graalvm.internal.tck.harness.TestInvocationLogic
import org.graalvm.internal.tck.harness.TestInvocationTask

TestUtils.locateRepoDirs(project) // Find relevant directories for the test harness.

logger.lifecycle("GraalVM Reachability Metadata TCK")
logger.lifecycle("---------------------------------")

String coordinates = Objects.requireNonNullElse(project.findProperty("coordinates"), "")
def (String groupId, String artifactId, String version) = TestInvocationLogic.splitCoordinates(coordinates)

// gradle test -Pcoordinates=<maven-coordinates>
Provider<Task> test = tasks.register("test", DefaultTask) { task ->
    task.setDescription("Tests JVM Reflection Metadata that matches given coordinates")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

for (Map<String, ?> inv in TestInvocationLogic.generateTestInvocations(groupId, artifactId, version)) {
    String taskName = "test-" + inv["coordinates"].replace(":", "-")
    if ((!tasks.getNames().contains(taskName))) {
        tasks.register(taskName, TestInvocationTask, inv)
    }
    test.configure {
        dependsOn(taskName)
    }
}

// gradle diff -PbaseCommit=<base-commit> -PnewCommit=<new-commit>
Provider<Task> diff = tasks.register("diff", DefaultTask) { task ->
    task.setDescription("Tests JVM Reflection Metadata that was changed between 'baseCommit' and 'newCommit'")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)

    if (!project.hasProperty("baseCommit")) {
        task.doFirst {
            throw new GradleException("Missing 'baseCommit' property! Rerun Gradle with '-PbaseCommit=<commit-hash>'")
        }
    }
}

if (project.hasProperty("baseCommit")) {
    String baseCommit = project.findProperty("baseCommit")
    String newCommit = Objects.requireNonNullElse(project.findProperty("newCommit"), "HEAD")
    for (def inv in TestInvocationLogic.diffTestInvocations(baseCommit, newCommit)) {
        String taskName = "test-" + inv["coordinates"].replace(":", "-")
        if ((!tasks.getNames().contains(taskName))) {
            tasks.register(taskName, TestInvocationTask, inv)
        }
        diff.configure {
            dependsOn(taskName)
        }
    }
}
Provider<Task> checkstyle = tasks.register("checkstyle") { task ->
    task.setDescription("Runs checkstyle on all subprojects")
    task.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
}

// We want to create a dedicated checkstyle task for every present test.
// TODO: Merge this with test invocation logic in order to register only tasks that are within filtered scope.
fileTree(TestUtils.testRoot).matching {
    include "**/build.gradle"
}.each { buildFile ->
    def projectDir = buildFile.parentFile.toPath()
    String name = TestUtils.testRoot.relativize(projectDir).toString().replace("/", "-").replace("\\", "-")
    Provider<Task> subtask = tasks.register("checkstyle-${name}", Exec) { task ->
        task.setCommandLine("gradle", "checkstyle")
        // We've created this task in TCK as a wrapper for "checkstyle<SourceSet>" tasks
        task.setWorkingDir(projectDir)
    }
    checkstyle.configure { it ->
        it.dependsOn(subtask)
    }
}

tasks.named("check").configure {
    dependsOn(checkstyle)
}
